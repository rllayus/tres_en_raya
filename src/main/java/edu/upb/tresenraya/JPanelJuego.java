/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package edu.upb.tresenraya;

import edu.upb.tresenraya.bl.Comando;
import edu.upb.tresenraya.bl.Contactos;
import edu.upb.tresenraya.bl.MarcarPartida;
import edu.upb.tresenraya.bl.MarcarPartidaExa;
import edu.upb.tresenraya.bl.juego.JuegoTresEnRaya;
import edu.upb.tresenraya.bl.juego.SimboloType;
import edu.upb.tresenraya.mediador.Mediador;
import edu.upb.tresenraya.mediador.OnMessageListener;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.SwingUtilities;
import lombok.Getter;
import lombok.Setter;

/**
 *
 * @author rlaredo
 */
@Getter
@Setter
public class JPanelJuego extends javax.swing.JPanel implements MouseListener, OnMessageListener {

    private JuegoTresEnRaya juego;
    private final int alturaTurno = 50;
    private String ipJugadorRemoto = null;

    /**
     * Creates new form JPanelJuego
     */
    public JPanelJuego() {
        initComponents();
        this.juego = new JuegoTresEnRaya();
        this.addMouseListener(this);
        Mediador.addListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 596, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 443, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        dibujarTurno(g);
        dibujarTablero(g);
        dibujarMarcas(g);
    }

    private void dibujarTablero(Graphics g) {
        int anchoCelda = getWidth() / 3;
        int altoCelda = (getHeight() - alturaTurno) / 3; // Ajuste de altura
        Graphics2D g2d = (Graphics2D) g; // Convertir a Graphics2D
        int grosor = 3; // Grosor de la línea en píxeles
        g2d.setStroke(new BasicStroke(grosor));
        // Líneas verticales
        g.drawLine(anchoCelda, alturaTurno, anchoCelda, getHeight());
        g.drawLine(2 * anchoCelda, alturaTurno, 2 * anchoCelda, getHeight());

        // Líneas horizontales
        g.drawLine(0, alturaTurno + altoCelda, getWidth(), alturaTurno + altoCelda);
        g.drawLine(0, alturaTurno + 2 * altoCelda, getWidth(), alturaTurno + 2 * altoCelda);
    }

    private void dibujarMarcas(Graphics g) {
        SimboloType[][] tablero = this.juego.getTablero();
        Graphics2D g2d = (Graphics2D) g; // Convertir a Graphics2D
        int grosor = 1; // Grosor de la línea en píxeles
        g2d.setStroke(new BasicStroke(grosor));
        int anchoCelda = getWidth() / 3;
        int altoCelda = (getHeight() - alturaTurno) / 3;

        for (int fila = 0; fila < 3; fila++) {
            for (int columna = 0; columna < 3; columna++) {
                if (tablero[fila][columna] == SimboloType.X) { // X
                    int x1 = columna * anchoCelda + 10;
                    int y1 = alturaTurno + fila * altoCelda + 10; // Ajuste de coordenada Y
                    int x2 = (columna + 1) * anchoCelda - 10;
                    int y2 = alturaTurno + (fila + 1) * altoCelda - 10; // Ajuste de coordenada Y
                    g.drawLine(x1, y1, x2, y2);
                    g.drawLine(x2, y1, x1, y2);
                } else if (tablero[fila][columna] == SimboloType.O) { // O
                    int x = columna * anchoCelda + 10;
                    int y = alturaTurno + fila * altoCelda + 10; // Ajuste de coordenada Y
                    int anchoO = anchoCelda - 20;
                    int altoO = altoCelda - 20;
                    g.drawOval(x, y, anchoO, altoO);
                }
            }
        }
    }

    private boolean verificarGanador() {
        // Lógica para verificar si hay un ganador
        return false;
    }

    private boolean verificarEmpate() {
        // Lógica para verificar si hay un empate
        return false;
    }

    private void dibujarTurno(Graphics g) {
        String texto = "Turno: " + this.juego.mostrarTurno().name();
        if (ipJugadorRemoto == null) {
            texto = "Juego sin iniciar";
        }

        g.setColor(Color.LIGHT_GRAY);
        g.fillRect(0, 0, getWidth(), alturaTurno);

        g.setColor(Color.BLACK);
        g.setFont(new Font("SansSerif", Font.BOLD, 20)); // Fuente moderna

        int anchoTexto = g.getFontMetrics().stringWidth(texto);
        int altoTexto = g.getFontMetrics().getHeight();
        int x = (getWidth() - anchoTexto) / 2;
        int y = (alturaTurno + altoTexto) / 2;

        g.drawString(texto, x, y);
    }

    @Override
    public void mouseClicked(MouseEvent e) {

        int x = e.getX();
        int y = e.getY() - alturaTurno; // Ajuste de coordenada Y

        if (y >= 0) { // Verificar si el clic está dentro del tablero principal
            int fila = y / ((getHeight() - alturaTurno) / 3);
            int columna = x / (getWidth() / 3);
            SimboloType simboloType = juego.mostrarTurno();
            
            if (SwingUtilities.isRightMouseButton(e)) {
                System.out.println("Clic derecho");
                this.juego.marcarExa(simboloType, fila, columna);
                Comando comando = new MarcarPartidaExa(simboloType.name(), fila, columna);
                Contactos.getInstance().send(ipJugadorRemoto, comando.getComando());
            } else {
                System.out.println("Clic");
                this.juego.marcar(simboloType, fila, columna);
                Comando comando = new MarcarPartida(simboloType.name(), fila, columna);
                Contactos.getInstance().send(ipJugadorRemoto, comando.getComando());
            }

            verificarGanador();
            verificarEmpate();
            repaint();
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    @Override
    public void onMessage(String msg) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void onMessage(Comando c) {
        if (c.getCodigoComando().equals("0008")) {
            MarcarPartida sol = (MarcarPartida) c;
            SimboloType simbolo = SimboloType.valueOf(sol.getSimbolo());
            this.juego.marcar(simbolo, sol.getPosicionX(), sol.getPosicionY());
            verificarGanador();
            verificarEmpate();
            repaint();
            return;
        }

        if (c.getCodigoComando().equals("0011")) {
            MarcarPartidaExa sol = (MarcarPartidaExa) c;
            SimboloType simbolo = SimboloType.valueOf(sol.getSimbolo());
            this.juego.marcarExa(simbolo, sol.getPosicionX(), sol.getPosicionY());
            verificarGanador();
            verificarEmpate();
            repaint();
            return;
        }

    }

    @Override
    public void onClose() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    public void iniciarJuego(String ipJugadorRemoto, SimboloType simboloType) {
        this.ipJugadorRemoto = ipJugadorRemoto;
        this.juego = new JuegoTresEnRaya(simboloType);
        repaint();
        System.out.println("Iniciando juego");
    }

    public void finalizar() {
        this.ipJugadorRemoto = null;
        this.juego = new JuegoTresEnRaya();
        repaint();
    }

    public SimboloType getTurno() {
        return this.juego.mostrarTurno();
    }
}
